# ################################
# Model: dtcn for source separation
# https://arxiv.org/abs/2010.13154
#
# Dataset : WSJ0-2Mix
# ################################
# Basic parameters
# Seed needs to be set at top of yaml, before objects with parameters are made
#l
seed: 1234
__set_seed: !apply:torch.manual_seed [!ref <seed>]

# Data params

# the data folder for the wham dataset
# data_folder needs to follow the format:  /yourpath/wsj0-2mix.
# make sure to use the name wsj0-2mix at your top folder for the dataset!
data_folder: /fastdata/acp19jwr/data/wsj0-2mix
# mini: False # if true only uses a quarter of the wham/wsj0-2mix data


# the path for wsj0/si_tr_s/ folder -- only needed if dynamic mixing is used
# e.g. /yourpath/wsj0-processed/si_tr_s/
# you need to convert the original wsj0 to 8k
# you can do this conversion with the script ../meta/preprocess_dynamic_mixing.py
base_folder_dm: /yourpath/wsj0-processed/si_tr_s/

experiment_name: deformable
experiment_folder: !ref wsj0-2mix/<experiment_name>/R=<R>/X=<X>
output_folder: !ref results/<experiment_folder>/<seed>
train_log: !ref <output_folder>/train_log.txt
save_folder: !ref <output_folder>/save

# the file names should start with wsj0-2mix instead of whamorg
train_data: !ref <save_folder>/wsj_tr.csv
valid_data: !ref <save_folder>/wsj_cv.csv
test_data: !ref <save_folder>/wsj_tt.csv
skip_prep: False

# Experiment params
auto_mix_prec: False # Set it to True for mixed precision
test_only: False
num_spks: 2 # set to 3 for wsj0-3mix
progressbar: True
save_audio: False # Save estimated sources on disk
sample_rate: 8000

# Training parameters
N_epochs: 100
batch_size: 1
lr: 0.001
clip_grad_norm: 5
loss_upper_lim: 9999  # this is the upper limit for an acceptable loss
# if True, the training sequences are cut to a specified length
limit_training_signal_len: True
# this is the length of sequences if we choose to limit
# the signal length of training sequences
training_signal_len: 32000

# Set it to True to dynamically create mixtures at training time
dynamic_mixing: False

# Parameters for data augmentation

# rir_path variable points to the directory of the room impulse responses
# e.g. /miniscratch/subakany/rir_wavs
# If the path does not exist, it is created automatically.
# rir_path: /share/mini1/usr/will/scratch/wsj0-2mix/rir_wavs

use_wavedrop: False
use_speedperturb: False
use_speedperturb_sameforeachsource: False
use_rand_shift: False
min_shift: -8000
max_shift: 8000

speedperturb: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
    perturb_prob: 1.0
    drop_freq_prob: 0.0
    drop_chunk_prob: 0.0
    sample_rate: !ref <sample_rate>
    speeds: [95, 100, 105]

wavedrop: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
    perturb_prob: 0.0
    drop_freq_prob: 1.0
    drop_chunk_prob: 1.0
    sample_rate: !ref <sample_rate>

# loss thresholding -- this thresholds the training loss
threshold_byloss: True
threshold: -30

# Encoder parameters
N_encoder_out: 512
out_channels: 512
kernel_size: 16
kernel_stride: 8

# Dataloader options
dataloader_opts:
    batch_size: !ref <batch_size>
    num_workers: 4

# Specifying the network
Encoder: !new:speechbrain.lobes.models.dual_path.Encoder
    kernel_size: !ref <kernel_size>
    out_channels: !ref <N_encoder_out>

X: 8
R: 3

MaskNet: !new:src.deformable.MaskNet
    N: !ref <N_encoder_out>
    B: 128
    H: 512
    P: 3
    X: !ref <X>
    R: !ref <R>
    C: !ref <num_spks>
    norm_type: 'gLN'
    causal: False
    mask_nonlinear: 'relu'

Decoder: !new:speechbrain.lobes.models.dual_path.Decoder
    in_channels: !ref <N_encoder_out>
    out_channels: 1
    kernel_size: !ref <kernel_size>
    stride: !ref <kernel_stride>
    bias: False

optimizer: !name:torch.optim.Adam
    lr: !ref <lr>
    weight_decay: 0

loss: !name:speechbrain.nnet.losses.get_si_snr_with_pitwrapper

lr_scheduler: !new:speechbrain.nnet.schedulers.ReduceLROnPlateau
    factor: 0.5
    patience: 3
    dont_halve_until_epoch: 3

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <N_epochs>

modules:
    encoder: !ref <Encoder>
    decoder: !ref <Decoder>
    masknet: !ref <MaskNet>

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        encoder: !ref <Encoder>
        decoder: !ref <Decoder>
        masknet: !ref <MaskNet>
        counter: !ref <epoch_counter>
        lr_scheduler: !ref <lr_scheduler>

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>
